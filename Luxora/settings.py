"""
Django settings for Luxora project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

from django.urls import reverse_lazy

from Luxora.middleware import LogIPMiddleware

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4p6ql*zwm(7g4&dkd-)x6b=zr7tx-tf30at1ju6)wj#)zj1_yf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']  # 允许任何主机


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'rooms',
    'orders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'Luxora.middleware.LogIPMiddleware',  # 添加自定义中间件
]

ROOT_URLCONF = 'Luxora.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Luxora.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'Luxora',  # 替换为你的数据库名
        'USER': 'root',  # 替换为你的数据库用户名
        'PASSWORD': '123456',  # 替换为你的数据库密码
        'HOST': 'localhost',  # 数据库主机，通常为 localhost
        'PORT': '3306',  # MySQL 的默认端口号
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# 设置为中国时区（北京时间）
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# STATICFILES_DIRS = [
#     BASE_DIR / 'static',  # 设置一个目录存放静态文件
# ]

AUTH_USER_MODEL = 'accounts.Employee'

# 在 settings.py 中设置登录页面
# LOGIN_URL = ''
LOGIN_URL = reverse_lazy('login')  # 使用 URL 名称

# 项目日志配置
LOGGING = {
    'version': 1,  # 指定配置版本，目前必须为1
    'disable_existing_loggers': False,  # 保留已有的日志记录器，不禁用现有日志记录器
    'formatters': {
        # 定义详细格式
        'verbose': {
            'format': '{levelname} {asctime} {module}.{funcName} {message}',  # 日志级别、时间、模块名、日志信息
            'style': '{',  # 使用花括号格式化字符串
        },
        # 定义简单格式
        'simple': {
            'format': '{levelname} {message}',  # 日志级别和日志信息
            'style': '{',
        },
    },
    'handlers': {
        # 为 accounts 模块定义一个文件处理器
        'file_accounts': {
            'level': 'INFO',  # 处理 INFO 级别及以上日志
            'class': 'logging.FileHandler',  # 使用 FileHandler 将日志写入文件
            'filename': BASE_DIR / 'accounts.log',  # 将日志写入项目根目录下的 accounts.log 文件
            'formatter': 'verbose',  # 使用 verbose 格式
            'encoding': 'utf-8',  # 指定使用 UTF-8 编码
        },
        'file_rooms': {
            'level': 'INFO',  # 处理 INFO 级别及以上日志
            'class': 'logging.FileHandler',  # 使用 FileHandler 将日志写入文件
            'filename': BASE_DIR / 'rooms.log',  # 将日志写入项目根目录下的 rooms.log 文件
            'formatter': 'verbose',  # 使用 verbose 格式
            'encoding': 'utf-8',  # 指定使用 UTF-8 编码
        },
        # 为 Django 内部日志定义一个文件处理器
        'file_django': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django.log',  # 日志文件存储在项目根目录下的 django.log 文件
            'formatter': 'verbose',
            'encoding': 'utf-8',  # 指定使用 UTF-8 编码
        },
        # 控制台处理器，输出到终端
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        # 配置名称为 'accounts' 的日志记录器（适用于所有 accounts 模块及其子模块）
        'accounts': {
            'handlers': ['file_accounts'],  # 使用 file_accounts 处理器
            'level': 'INFO',  # 日志级别设为 INFO
            'propagate': False,  # 不将日志消息传播给父记录器，防止重复记录
        },
        'rooms': {
            'handlers': ['file_rooms'],  # 使用 file_rooms 处理器
            'level': 'INFO',  # 日志级别设为 INFO
            'propagate': False,  # 不将日志消息传播给父记录器，防止重复记录
        },
        # 配置 Django 内部日志记录器
        'django': {
            'handlers': ['file_django','console'],  # 使用 file_django 处理器
            'level': 'INFO',  # 日志级别设为 INFO
            'propagate': True,  # 允许日志消息传播到上级记录器
        },
    },
}
#
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#
# MEDIA_URL = '/media/'  # 访问 URL
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 物理存储位置



