# Generated by Django 5.1.5 on 2025-02-18 08:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Homestay',
            fields=[
                ('id', models.CharField(default='default', max_length=30, primary_key=True, serialize=False, unique=True, verbose_name='民宿号')),
                ('name', models.CharField(default='default', max_length=100, verbose_name='民宿名称')),
                ('address', models.CharField(default='default', max_length=200, verbose_name='地址')),
                ('introduction', models.TextField(blank=True, verbose_name='民宿介绍')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('manager', '民宿管理员'), ('reception', '民宿前台'), ('cleaner', '民宿保洁')], default='reception', max_length=20, verbose_name='角色')),
                ('employee_id', models.CharField(default='default', max_length=30, unique=True, verbose_name='工号')),
                ('employee_name', models.CharField(default='default', max_length=30, verbose_name='姓名')),
                ('employee_password', models.CharField(default='default', max_length=50, verbose_name='明文密码')),
                ('employee_address', models.CharField(default='default', max_length=200, verbose_name='通讯地址')),
                ('employee_phone', models.CharField(default='default', max_length=15, verbose_name='电话')),
                ('employee_IDcard', models.CharField(default='default', max_length=20, verbose_name='身份证')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('homestay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='accounts.homestay', verbose_name='所属民宿')),
            ],
            options={
                'ordering': ['role', 'employee_id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
